16 = 1 * 10^1 + 6 * 10^0

10000 = 1 * 2^4

1001  => 9

                      1010  => 10
                    1100100 => 100
                 1111101000 => 1000
             10011100010000 => 10000
          11000011010100000 => 100000
       11110100001001000000 => 1000000
   100110001001011010000000 => 10000000
101111101011110000100000000 => 100000000

*10 = * 2 * 5



0  000000
1  000001
2  000010
3  000011
4  000100
5  000101
6  000110
7  000111
8  001000
9  001001
10 001010
11 001011
12 001100
13 001101
14 001110
15 001111
16 010000
17 010001
18 010010
19 010011
20 010100
21 010101
22 010110
23 010111
24 011000
25 011001
26 011010
27 011011
28 011100
29 011101
30 011110
31 011111
32 100000
33 100001
34 100010
35 100011
36 100100
37 100101
38 100110
39 100111
40 101000
41 101001
42 101010
43 101011
44 101100
45 101101
46 101110
47 101111
48 110000
49 110001
50 110010




TODO: nums from powers of 2
    1 00000000000000001
    2 00000000000000010
    4 00000000000000100
    8 00000000000001000
   16 00000000000010000
   32 00000000000100000
   64 00000000001000000
  128 00000000010000000
  256 00000000100000000
  512 00000001000000000
 1024 00000010000000000
 2048 00000100000000000
 4096 00001000000000000
 8192 00010000000000000
16384 00100000000000000
32768 01000000000000000
65536 10000000000000000

1st num rep seq: 4
2nd num rep seq: 20
3rd num rep seq: 100
4rd num rep seq: 500
nth num rep seq: 4 * 5^(n-1)


a = 2^N

nth digit = Math.floor((2**(N % (4 * 5 **(n))) ) / (10 ** (n-1)) % 10)

1
3
6
2
5

1
2
4
9
9

8
6
3
7
4

8
7
5
0
0


1
3
6
2
5
1
2
4
9
9
8
6
3
7
4
8
7
5
0
0
1
3
6
2
5
1




// shortest repeating sequence
^(?:(\S+?)\1+)$

3rd digit

0
0
0
0
0
0
0

1
2
5
0
0
0
1
3
7
5
0
1
2
5
1
3
6
2
4
8
7
4
9
8
6
2
5
1
3
7
4
9
8
7
5
1
2
4
8
6
3
6
3
6
2
4
9
9
9
9
8
7
4
9
9
9
8
6
2
4
9
8
7
4
8
6
3
7
5
1
2
5
0
1
3
7
4
8
6
2
5
0
1
2
4
8
7
5
1
3
6
3
6




2^n ===  [100]
